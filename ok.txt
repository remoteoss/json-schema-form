diff --git a/src/mutations.ts b/src/mutations.ts
index b0e67a6..1a0e890 100644
--- a/src/mutations.ts
+++ b/src/mutations.ts
@@ -32,6 +32,9 @@ export function calculateFinalSchema({
 
   if (jsonLogicContext?.schema.computedValues) {
     applyComputedAttrsToSchema(schemaCopy, jsonLogicContext.schema.computedValues, values)
+    // If we had computed values applied to the schema,
+    // we need to re-apply the schema rules to update the fields
+    applySchemaRules(schemaCopy, values, options, jsonLogicContext)
   }
 
   return schemaCopy
diff --git a/src/types.ts b/src/types.ts
index d97da78..22fc750 100644
--- a/src/types.ts
+++ b/src/types.ts
@@ -68,16 +68,16 @@ export type JsfSchema = JSONSchema & {
   // schema (like an if inside another schema), the required property won't be
   // present in the type
   'required'?: string[]
-  // Defines the order of the fields in the form.
+  /* Defines the order of the fields in the form. */
   'x-jsf-order'?: string[]
-  // Defines the presentation of the field in the form.
+  /* Defines the presentation of the field in the form. */
   'x-jsf-presentation'?: JsfPresentation
-  // Defines the error message of the field in the form.
+  /* Defines the error message of the field in the form. */
   'x-jsf-errorMessage'?: Record<string, string>
   'x-jsf-logic'?: JsonLogicSchema
-  // Extra validations to run. References validations in the `x-jsf-logic` root property.
+  /* Extra validations to run. References validations in the `x-jsf-logic` root property. */
   'x-jsf-logic-validations'?: string[]
-  // Extra attributes to add to the schema. References computedValues in the `x-jsf-logic` root property.
+  /* Extra attributes to add to the schema. References computedValues in the `x-jsf-logic` root property. */
   'x-jsf-logic-computedAttrs'?: Record<string, string | object>
 }
 
diff --git a/src/validation/json-logic.ts b/src/validation/json-logic.ts
index 3c5c5d3..5f15278 100644
--- a/src/validation/json-logic.ts
+++ b/src/validation/json-logic.ts
@@ -165,7 +165,7 @@ function cycleThroughPropertiesAndApplyValues(schemaCopy: JsfObjectSchema, compu
     delete propertySchema['x-jsf-logic-computedAttrs']
   }
 
-  // If this is a full property schema, we need to cycle through the properties and apply the computed values
+  // If the schemas has properties, we need to cycle through each one and apply the computed values
   // Otherwise, just process the property
   if (schemaCopy.properties) {
     for (const propertyName in schemaCopy.properties) {
@@ -175,6 +175,27 @@ function cycleThroughPropertiesAndApplyValues(schemaCopy: JsfObjectSchema, compu
   else {
     processProperty(schemaCopy)
   }
+
+  // If the schema has an if statement, we need to cycle through the properties and apply the computed values
+  if (schemaCopy.if) {
+    cycleThroughPropertiesAndApplyValues(schemaCopy.if as JsfObjectSchema, computedValues)
+  }
+
+  /* If the schema has an allOf or anyOf property, we need to cycle through each property inside it and
+   * apply the computed values
+   */
+
+  if (schemaCopy.allOf && schemaCopy.allOf.length > 0) {
+    for (const schema of schemaCopy.allOf) {
+      cycleThroughPropertiesAndApplyValues(schema as JsfObjectSchema, computedValues)
+    }
+  }
+
+  if (schemaCopy.anyOf && schemaCopy.anyOf.length > 0) {
+    for (const schema of schemaCopy.anyOf) {
+      cycleThroughPropertiesAndApplyValues(schema as JsfObjectSchema, computedValues)
+    }
+  }
 }
 
 /**
diff --git a/test/validation/json-logic.test.ts b/test/validation/json-logic.test.ts
index 69b883e..b8b8528 100644
--- a/test/validation/json-logic.test.ts
+++ b/test/validation/json-logic.test.ts
@@ -464,4 +464,76 @@ describe('applyComputedAttrsToSchema', () => {
     const ageProperties = result.properties?.age as JsfObjectSchema
     expect(ageProperties?.minimum).toBe(21)
   })
+
+  it('allows to use computed values inside conditional statements', () => {
+    const schema: JsfObjectSchema = {
+      'properties': {
+        pine_trees: {
+          title: 'Pine trees planted',
+          type: 'number',
+          description: 'The number of pine trees you have planted.',
+        },
+        oak_trees: {
+          type: 'number',
+          title: 'Oak trees planted',
+          description: 'Enter the number of oak trees you\'ve planted. If there are more pine trees than oak trees, you\'ll need to plant spruce trees as well. But this only counts if less than 10 pines planted.',
+        },
+        spruce_trees: {
+          title: 'Spruce trees planted',
+          type: 'number',
+          description: 'The number of spruce trees you have planted (only required if specific conditions are met).',
+        },
+      },
+      'allOf': [
+        {
+          if: {
+            properties: {
+              oak_trees: {
+                'x-jsf-logic-computedAttrs': {
+                  minimum: 'pine_value',
+                },
+              },
+            },
+          },
+          then: {
+            required: [
+              'spruce_trees',
+            ],
+          },
+          else: {
+            properties: {
+              spruce_trees: false,
+            },
+          },
+        },
+      ],
+      'required': [
+        'pine_trees',
+        'oak_trees',
+      ],
+      'x-jsf-logic': {
+        computedValues: {
+          pine_value: {
+            rule: {
+              '+': [
+                {
+                  var: 'pine_trees',
+                },
+                1,
+              ],
+            },
+          },
+        },
+      },
+    };
+
+    // Mock the jsonLogic.apply to return 10
+    (jsonLogic.apply as jest.Mock).mockReturnValue(10)
+
+    const result = JsonLogicValidation.applyComputedAttrsToSchema(schema, schema['x-jsf-logic']?.computedValues, { pine_trees: 10, oak_trees: 2 })
+
+    const conditionValue = result.allOf?.[0].if?.properties?.oak_trees as JsfObjectSchema
+    expect(conditionValue['x-jsf-logic-computedAttrs']).toBeUndefined()
+    expect(conditionValue.minimum).toBe(10)
+  })
 })
