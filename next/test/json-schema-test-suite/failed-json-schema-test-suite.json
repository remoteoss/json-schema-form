{
  "JSON Schema Test Suite": {
    "additionalProperties being false does not allow other properties": [
      "an additional property is invalid"
    ],
    "non-ASCII pattern with additionalProperties": [
      "not matching the pattern is invalid"
    ],
    "additionalProperties with schema": [
      "an additional invalid property is invalid"
    ],
    "additionalProperties can exist by itself": [
      "an additional invalid property is invalid"
    ],
    "additionalProperties does not look in applicators": [
      "properties defined in allOf are not examined"
    ],
    "additionalProperties with propertyNames": [
      "Valid against propertyNames, but not additionalProperties"
    ],
    "dependentSchemas with additionalProperties": [
      "additionalProperties doesn't consider dependentSchemas",
      "additionalProperties can't see bar",
      "additionalProperties can't see bar even when foo2 is present"
    ],
    "Location-independent identifier": [
      "mismatch"
    ],
    "Location-independent identifier with absolute URI": [
      "mismatch"
    ],
    "Location-independent identifier with base URI change in subschema": [
      "mismatch"
    ],
    "same $anchor with different base uri": [
      "$ref does not resolve to /$defs/A/allOf/0"
    ],
    "contains keyword validation": [
      "array without items matching schema is invalid",
      "empty array is invalid"
    ],
    "contains keyword with const keyword": [
      "array without item 5 is invalid"
    ],
    "contains keyword with boolean schema true": [
      "empty array is invalid"
    ],
    "contains keyword with boolean schema false": [
      "any non-empty array is invalid",
      "empty array is invalid"
    ],
    "items + contains": [
      "matches items, does not match contains",
      "does not match items, matches contains",
      "matches neither items nor contains"
    ],
    "contains with false if subschema": [
      "empty array is invalid"
    ],
    "validate definition against metaschema": [
      "invalid definition schema"
    ],
    "single dependency": [
      "missing dependency",
      "wrong type",
      "wrong type other",
      "wrong type both"
    ],
    "multiple dependents required": [
      "missing dependency",
      "missing other dependency",
      "missing both dependencies"
    ],
    "dependencies with escaped characters": [
      "CRLF missing dependent",
      "quoted quotes missing dependent",
      "quoted quote",
      "quoted tab invalid under dependent schema",
      "quoted quote invalid under dependent schema"
    ],
    "boolean subschemas": [
      "object with property having schema false is invalid",
      "object with both properties is invalid"
    ],
    "dependent subschema incompatible with root": [
      "matches root",
      "matches both"
    ],
    "A $dynamicRef to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor": [
      "An array of strings is valid"
    ],
    "A $dynamicRef to an $anchor in the same schema resource behaves like a normal $ref to an $anchor": [
      "An array of strings is valid"
    ],
    "A $ref to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor": [
      "An array of strings is valid"
    ],
    "A $dynamicRef resolves to the first $dynamicAnchor still in scope that is encountered when the schema is evaluated": [
      "An array containing non-strings is invalid"
    ],
    "A $dynamicRef without anchor in fragment behaves identical to $ref": [
      "An array of strings is invalid"
    ],
    "A $dynamicRef with intermediate scopes that don't include a matching $dynamicAnchor does not affect dynamic scope resolution": [
      "An array containing non-strings is invalid"
    ],
    "A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor resolves to the first $dynamicAnchor in the dynamic scope": [
      "The recursive part is not valid against the root"
    ],
    "multiple dynamic paths to the $dynamicRef keyword": [
      "number list with string values",
      "string list with number values"
    ],
    "after leaving a dynamic scope, it is not used by a $dynamicRef": [
      "string matches /$defs/thingy, but the $dynamicRef does not stop here",
      "first_scope is not in dynamic scope for the $dynamicRef"
    ],
    "strict-tree schema, guards against misspelled properties": [
      "instance with misspelled field"
    ],
    "tests for implementation dynamic anchor and reference link": [
      "incorrect parent schema",
      "incorrect extended schema"
    ],
    "$ref and $dynamicAnchor are independent of order - $defs first": [
      "incorrect parent schema",
      "incorrect extended schema"
    ],
    "$ref and $dynamicAnchor are independent of order - $ref first": [
      "incorrect parent schema",
      "incorrect extended schema"
    ],
    "$ref to $dynamicRef finds detached $dynamicAnchor": [
      "non-number is invalid"
    ],
    "$dynamicRef points to a boolean schema": [
      "follow $dynamicRef to a false schema"
    ],
    "$dynamicRef skips over intermediate resources - direct reference": [
      "string property fails"
    ],
    "email format": [
      "invalid email string is only an annotation by default"
    ],
    "idn-email format": [
      "invalid idn-email string is only an annotation by default"
    ],
    "regex format": [
      "invalid regex string is only an annotation by default"
    ],
    "ipv4 format": [
      "invalid ipv4 string is only an annotation by default"
    ],
    "ipv6 format": [
      "invalid ipv6 string is only an annotation by default"
    ],
    "hostname format": [
      "invalid hostname string is only an annotation by default"
    ],
    "date format": [
      "invalid date string is only an annotation by default"
    ],
    "time format": [
      "invalid time string is only an annotation by default"
    ],
    "json-pointer format": [
      "invalid json-pointer string is only an annotation by default"
    ],
    "relative-json-pointer format": [
      "invalid relative-json-pointer string is only an annotation by default"
    ],
    "iri format": [
      "invalid iri string is only an annotation by default"
    ],
    "uri format": [
      "invalid uri string is only an annotation by default"
    ],
    "uri-template format": [
      "invalid uri-template string is only an annotation by default"
    ],
    "uuid format": [
      "invalid uuid string is only an annotation by default"
    ],
    "duration format": [
      "invalid duration string is only an annotation by default"
    ],
    "evaluating the same schema location against the same data location twice is not a sign of an infinite loop": [
      "failing case"
    ],
    "a schema given for items": [
      "wrong type of items"
    ],
    "items with boolean schema (false)": [
      "any non-empty array is invalid"
    ],
    "items and subitems": [
      "valid items",
      "fewer items is valid"
    ],
    "nested items": [
      "valid nested array"
    ],
    "prefixItems with no additional items allowed": [
      "additional items are not permitted"
    ],
    "items does not look in applicators, valid case": [
      "prefixItems in allOf does not constrain items, invalid case"
    ],
    "prefixItems validation adjusts the starting index for items": [
      "wrong type of second item"
    ],
    "items with heterogeneous array": [
      "heterogeneous invalid instance"
    ],
    "maxContains with contains": [
      "empty data",
      "all elements match, invalid maxContains",
      "some elements match, invalid maxContains"
    ],
    "maxContains with contains, value with a decimal": [
      "too many elements match, invalid maxContains"
    ],
    "minContains < maxContains": [
      "actual < minContains < maxContains",
      "minContains < maxContains < actual"
    ],
    "maxItems validation": [
      "too long is invalid"
    ],
    "maxItems validation with a decimal": [
      "too long is invalid"
    ],
    "maxProperties validation": [
      "too long is invalid"
    ],
    "maxProperties validation with a decimal": [
      "too long is invalid"
    ],
    "maxProperties = 0 means the object is empty": [
      "one property is invalid"
    ],
    "minContains=1 with contains": [
      "empty data",
      "no elements match"
    ],
    "minContains=2 with contains": [
      "empty data",
      "all elements match, invalid minContains",
      "some elements match, invalid minContains"
    ],
    "minContains=2 with contains with a decimal value": [
      "one element matches, invalid minContains"
    ],
    "maxContains = minContains": [
      "empty data",
      "all elements match, invalid minContains",
      "all elements match, invalid maxContains"
    ],
    "maxContains < minContains": [
      "empty data",
      "invalid minContains",
      "invalid maxContains",
      "invalid maxContains and minContains"
    ],
    "minContains = 0 with maxContains": [
      "too many"
    ],
    "minItems validation": [
      "too short is invalid"
    ],
    "minItems validation with a decimal": [
      "too short is invalid"
    ],
    "minProperties validation": [
      "too short is invalid"
    ],
    "minProperties validation with a decimal": [
      "too short is invalid"
    ],
    "by small number": [
      "0.0075 is multiple of 0.0001"
    ],
    "small multiple of large integer": [
      "any integer is a multiple of 1e-8"
    ],
    "collect annotations inside a 'not', even if collection is disabled": [
      "unevaluated property"
    ],
    "patternProperties validates properties matching a regex": [
      "a single invalid match is invalid",
      "multiple invalid matches is invalid"
    ],
    "multiple simultaneous patternProperties are validated": [
      "an invalid due to one is invalid",
      "an invalid due to the other is invalid",
      "an invalid due to both is invalid"
    ],
    "regexes are not anchored by default and are case sensitive": [
      "recognized members are accounted for",
      "regexes are case sensitive, 2"
    ],
    "patternProperties with boolean schemas": [
      "object with property matching schema false is invalid",
      "object with both properties is invalid",
      "object with a property matching both true and false is invalid"
    ],
    "a schema given for prefixItems": [
      "wrong types"
    ],
    "prefixItems with boolean schemas": [
      "array with two items is invalid"
    ],
    "properties, patternProperties, additionalProperties interaction": [
      "property validates property",
      "patternProperty invalidates nonproperty",
      "additionalProperty ignores property",
      "additionalProperty invalidates others"
    ],
    "properties whose names are Javascript object property names": [
      "ignores arrays",
      "none of the properties mentioned"
    ],
    "propertyNames validation": [
      "some property names invalid"
    ],
    "propertyNames with boolean schema false": [
      "object with any properties is invalid"
    ],
    "root pointer ref": [
      "mismatch",
      "recursive mismatch"
    ],
    "relative pointer ref to object": [
      "mismatch"
    ],
    "relative pointer ref to array": [
      "mismatch array"
    ],
    "escaped pointer ref": [
      "slash invalid",
      "tilde invalid",
      "percent invalid"
    ],
    "nested refs": [
      "nested ref invalid"
    ],
    "ref applies alongside sibling keywords": [
      "ref valid, maxItems invalid",
      "ref invalid"
    ],
    "remote ref, containing refs itself": [
      "remote ref invalid"
    ],
    "property named $ref, containing an actual $ref": [
      "property named $ref invalid"
    ],
    "$ref to boolean schema false": [
      "any value is invalid"
    ],
    "Recursive references between schemas": [
      "valid tree"
    ],
    "refs with quote": [
      "object with strings is invalid"
    ],
    "ref creates new scope when adjacent to keywords": [
      "referenced subschema doesn't see annotations from properties"
    ],
    "refs with relative uris and defs": [
      "invalid on inner field",
      "invalid on outer field"
    ],
    "relative refs with absolute uris and defs": [
      "invalid on inner field",
      "invalid on outer field"
    ],
    "$id must be resolved against nearest parent, not just immediate parent": [
      "non-number is invalid"
    ],
    "order of evaluation: $id and $ref": [
      "data is invalid against first definition"
    ],
    "order of evaluation: $id and $anchor and $ref": [
      "data is invalid against first definition"
    ],
    "simple URN base URI with $ref via the URN": [
      "invalid under the URN IDed schema"
    ],
    "simple URN base URI with JSON pointer": [
      "a non-string is invalid"
    ],
    "URN base URI with NSS": [
      "a non-string is invalid"
    ],
    "URN base URI with r-component": [
      "a non-string is invalid"
    ],
    "URN base URI with q-component": [
      "a non-string is invalid"
    ],
    "URN base URI with URN and JSON pointer ref": [
      "a non-string is invalid"
    ],
    "URN base URI with URN and anchor ref": [
      "a non-string is invalid"
    ],
    "URN ref with nested pointer ref": [
      "a non-string is invalid"
    ],
    "ref to if": [
      "a non-integer is invalid due to the $ref"
    ],
    "ref to then": [
      "a non-integer is invalid due to the $ref"
    ],
    "ref to else": [
      "a non-integer is invalid due to the $ref"
    ],
    "ref with absolute-path-reference": [
      "an integer is invalid"
    ],
    "$id with file URI still resolves pointers - *nix": [
      "non-number is invalid"
    ],
    "$id with file URI still resolves pointers - windows": [
      "non-number is invalid"
    ],
    "empty tokens in $ref json-pointer": [
      "non-number is invalid"
    ],
    "remote ref": [
      "remote ref invalid"
    ],
    "fragment within remote ref": [
      "remote fragment invalid"
    ],
    "anchor within remote ref": [
      "remote anchor invalid"
    ],
    "ref within remote ref": [
      "ref within ref invalid"
    ],
    "base URI change": [
      "base URI change ref invalid"
    ],
    "base URI change - change folder": [
      "string is invalid"
    ],
    "base URI change - change folder in subschema": [
      "string is invalid"
    ],
    "root ref in remote ref": [
      "object is invalid"
    ],
    "remote ref with ref to defs": [
      "invalid"
    ],
    "Location-independent identifier in remote ref": [
      "string is invalid"
    ],
    "retrieved nested refs resolve relative to their URI not $id": [
      "number is invalid"
    ],
    "remote HTTP ref with different $id": [
      "number is invalid"
    ],
    "remote HTTP ref with different URN $id": [
      "number is invalid"
    ],
    "remote HTTP ref with nested absolute ref": [
      "number is invalid"
    ],
    "$ref to $ref finds detached $anchor": [
      "non-number is invalid"
    ],
    "required validation": [
      "ignores arrays"
    ],
    "required properties whose names are Javascript object property names": [
      "none of the properties mentioned",
      "__proto__ present",
      "toString present",
      "constructor present"
    ],
    "object type matches objects": [
      "an array is not an object"
    ],
    "array type matches arrays": [
      "an array is an array"
    ],
    "unevaluatedItems false": [
      "with unevaluated items"
    ],
    "unevaluatedItems as schema": [
      "with invalid unevaluated items"
    ],
    "unevaluatedItems with tuple": [
      "with unevaluated items"
    ],
    "unevaluatedItems with items": [
      "invalid under items"
    ],
    "unevaluatedItems with nested tuple": [
      "with unevaluated items"
    ],
    "unevaluatedItems with nested items": [
      "with invalid additional item"
    ],
    "unevaluatedItems with anyOf": [
      "when one schema matches and has unevaluated items",
      "when two schemas match and has unevaluated items"
    ],
    "unevaluatedItems with oneOf": [
      "with no unevaluated items"
    ],
    "unevaluatedItems with not": [
      "with unevaluated items"
    ],
    "unevaluatedItems with if/then/else": [
      "when if matches and it has unevaluated items",
      "when if doesn't match and it has unevaluated items"
    ],
    "unevaluatedItems with boolean schemas": [
      "with unevaluated items"
    ],
    "unevaluatedItems with $ref": [
      "with unevaluated items"
    ],
    "unevaluatedItems before $ref": [
      "with unevaluated items"
    ],
    "unevaluatedItems with $dynamicRef": [
      "with unevaluated items"
    ],
    "unevaluatedItems can't see inside cousins": [
      "always fails"
    ],
    "item is evaluated in an uncle schema to unevaluatedItems": [
      "uncle keyword evaluation is not significant"
    ],
    "unevaluatedItems depends on adjacent contains": [
      "contains fails, second item is not evaluated",
      "contains passes, second item is not evaluated"
    ],
    "unevaluatedItems depends on multiple nested contains": [
      "7 not evaluated, fails unevaluatedItems"
    ],
    "unevaluatedItems and contains interact to control item dependency relationship": [
      "only b's are invalid",
      "only c's are invalid",
      "only b's and c's are invalid",
      "only a's and c's are invalid"
    ],
    "unevaluatedItems can see annotations from if without then and else": [
      "invalid in case if is evaluated"
    ],
    "unevaluatedProperties schema": [
      "with invalid unevaluated properties"
    ],
    "unevaluatedProperties false": [
      "with unevaluated properties"
    ],
    "unevaluatedProperties with adjacent properties": [
      "with unevaluated properties"
    ],
    "unevaluatedProperties with adjacent patternProperties": [
      "with unevaluated properties"
    ],
    "unevaluatedProperties with nested properties": [
      "with additional properties"
    ],
    "unevaluatedProperties with nested patternProperties": [
      "with additional properties"
    ],
    "unevaluatedProperties with anyOf": [
      "when one matches and has unevaluated properties",
      "when two match and has unevaluated properties"
    ],
    "unevaluatedProperties with oneOf": [
      "with unevaluated properties"
    ],
    "unevaluatedProperties with not": [
      "with unevaluated properties"
    ],
    "unevaluatedProperties with if/then/else": [
      "when if is true and has unevaluated properties",
      "when if is false and has unevaluated properties"
    ],
    "unevaluatedProperties with if/then/else, then not defined": [
      "when if is true and has no unevaluated properties",
      "when if is true and has unevaluated properties",
      "when if is false and has unevaluated properties"
    ],
    "unevaluatedProperties with if/then/else, else not defined": [
      "when if is true and has unevaluated properties",
      "when if is false and has no unevaluated properties",
      "when if is false and has unevaluated properties"
    ],
    "unevaluatedProperties with dependentSchemas": [
      "with unevaluated properties"
    ],
    "unevaluatedProperties with boolean schemas": [
      "with unevaluated properties"
    ],
    "unevaluatedProperties with $ref": [
      "with unevaluated properties"
    ],
    "unevaluatedProperties before $ref": [
      "with unevaluated properties"
    ],
    "unevaluatedProperties with $dynamicRef": [
      "with unevaluated properties"
    ],
    "unevaluatedProperties can't see inside cousins": [
      "always fails"
    ],
    "unevaluatedProperties can't see inside cousins (reverse order)": [
      "always fails"
    ],
    "nested unevaluatedProperties, outer true, inner false, properties outside": [
      "with no nested unevaluated properties",
      "with nested unevaluated properties"
    ],
    "nested unevaluatedProperties, outer true, inner false, properties inside": [
      "with nested unevaluated properties"
    ],
    "cousin unevaluatedProperties, true and false, true with properties": [
      "with no nested unevaluated properties",
      "with nested unevaluated properties"
    ],
    "cousin unevaluatedProperties, true and false, false with properties": [
      "with nested unevaluated properties"
    ],
    "property is evaluated in an uncle schema to unevaluatedProperties": [
      "uncle keyword evaluation is not significant"
    ],
    "in-place applicator siblings, allOf has unevaluated": [
      "base case: both properties present",
      "in place applicator siblings, foo is missing"
    ],
    "in-place applicator siblings, anyOf has unevaluated": [
      "base case: both properties present",
      "in place applicator siblings, bar is missing"
    ],
    "unevaluatedProperties + single cyclic ref": [
      "Unevaluated on 1st level is invalid",
      "Unevaluated on 2nd level is invalid",
      "Unevaluated on 3rd level is invalid"
    ],
    "unevaluatedProperties + ref inside allOf / oneOf": [
      "Empty is invalid (no x or y)",
      "a and b are invalid (no x or y)",
      "a and y are valid",
      "a and b and y are valid"
    ],
    "dynamic evalation inside nested refs": [
      "Empty is invalid",
      "a is valid",
      "b + c is invalid",
      "b + d is invalid",
      "c + d is invalid",
      "xx + foo is invalid",
      "xx + b is invalid",
      "xx + c is invalid",
      "xx + d is invalid"
    ],
    "unevaluatedProperties not affected by propertyNames": [
      "string property is invalid"
    ],
    "unevaluatedProperties can see annotations from if without then and else": [
      "invalid in case if is evaluated"
    ],
    "dependentSchemas with unevaluatedProperties": [
      "unevaluatedProperties doesn't consider dependentSchemas",
      "unevaluatedProperties doesn't see bar when foo2 is absent"
    ],
    "uniqueItems validation": [
      "non-unique array of integers is invalid",
      "non-unique array of more than two integers is invalid",
      "numbers are unique if mathematically unequal",
      "non-unique array of strings is invalid",
      "non-unique array of objects is invalid",
      "property order of array of objects is ignored",
      "non-unique array of nested objects is invalid",
      "non-unique array of arrays is invalid",
      "non-unique array of more than two arrays is invalid",
      "non-unique heterogeneous types are invalid",
      "objects are non-unique despite key order"
    ],
    "uniqueItems with an array of items": [
      "[false, false] from items array is not valid",
      "[true, true] from items array is not valid",
      "non-unique array extended from [false, true] is not valid",
      "non-unique array extended from [true, false] is not valid"
    ],
    "uniqueItems with an array of items and additionalItems=false": [
      "[false, false] from items array is not valid",
      "[true, true] from items array is not valid",
      "extra items are invalid even if unique"
    ],
    "uniqueItems=false with an array of items and additionalItems=false": [
      "extra items are invalid even if unique"
    ],
    "schema that uses custom metaschema with with no validation vocabulary": [
      "no validation: invalid number, but it still validates"
    ]
  }
}
