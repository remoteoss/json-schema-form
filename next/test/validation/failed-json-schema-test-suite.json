{
  "failedTests": [
    "JSON Schema Test Suite additionalProperties being false does not allow other properties no additional properties is valid",
    "JSON Schema Test Suite additionalProperties being false does not allow other properties ignores strings",
    "JSON Schema Test Suite additionalProperties being false does not allow other properties ignores other non-objects",
    "JSON Schema Test Suite additionalProperties being false does not allow other properties patternProperties are not additional properties",
    "JSON Schema Test Suite non-ASCII pattern with additionalProperties not matching the pattern is invalid",
    "JSON Schema Test Suite additionalProperties with schema no additional properties is valid",
    "JSON Schema Test Suite additionalProperties with schema an additional valid property is valid",
    "JSON Schema Test Suite additionalProperties can exist by itself an additional invalid property is invalid",
    "JSON Schema Test Suite additionalProperties are allowed by default additional properties are allowed",
    "JSON Schema Test Suite additionalProperties does not look in applicators properties defined in allOf are not examined",
    "JSON Schema Test Suite additionalProperties with propertyNames Valid against propertyNames, but not additionalProperties",
    "JSON Schema Test Suite dependentSchemas with additionalProperties additionalProperties doesn't consider dependentSchemas",
    "JSON Schema Test Suite dependentSchemas with additionalProperties additionalProperties can't see bar",
    "JSON Schema Test Suite allOf mismatch second",
    "JSON Schema Test Suite allOf mismatch first",
    "JSON Schema Test Suite allOf wrong type",
    "JSON Schema Test Suite allOf with base schema valid",
    "JSON Schema Test Suite allOf simple types valid",
    "JSON Schema Test Suite allOf with boolean schemas, all true any value is valid",
    "JSON Schema Test Suite allOf with one empty schema any data is valid",
    "JSON Schema Test Suite allOf with two empty schemas any data is valid",
    "JSON Schema Test Suite allOf with the first empty schema number is valid",
    "JSON Schema Test Suite allOf with the last empty schema number is valid",
    "JSON Schema Test Suite allOf combined with anyOf, oneOf allOf: true, anyOf: true, oneOf: true",
    "JSON Schema Test Suite Location-independent identifier match",
    "JSON Schema Test Suite Location-independent identifier with absolute URI match",
    "JSON Schema Test Suite Location-independent identifier with base URI change in subschema match",
    "JSON Schema Test Suite same $anchor with different base uri $ref resolves to /$defs/A/allOf/1",
    "JSON Schema Test Suite anyOf first anyOf valid",
    "JSON Schema Test Suite anyOf second anyOf valid",
    "JSON Schema Test Suite anyOf both anyOf valid",
    "JSON Schema Test Suite anyOf with base schema both anyOf invalid",
    "JSON Schema Test Suite anyOf with boolean schemas, all true any value is valid",
    "JSON Schema Test Suite anyOf with boolean schemas, some true any value is valid",
    "JSON Schema Test Suite anyOf complex types neither anyOf valid (complex)",
    "JSON Schema Test Suite anyOf with one empty schema string is valid",
    "JSON Schema Test Suite anyOf with one empty schema number is valid",
    "JSON Schema Test Suite const validation same value is valid",
    "JSON Schema Test Suite const with object another object is invalid",
    "JSON Schema Test Suite const with object another type is invalid",
    "JSON Schema Test Suite const with array another array item is invalid",
    "JSON Schema Test Suite const with array array with additional items is invalid",
    "JSON Schema Test Suite const with false does not match 0 false is valid",
    "JSON Schema Test Suite const with true does not match 1 true is valid",
    "JSON Schema Test Suite const with [false] does not match [0] [0] is invalid",
    "JSON Schema Test Suite const with [false] does not match [0] [0.0] is invalid",
    "JSON Schema Test Suite const with [true] does not match [1] [1] is invalid",
    "JSON Schema Test Suite const with [true] does not match [1] [1.0] is invalid",
    "JSON Schema Test Suite const with {\"a\": false} does not match {\"a\": 0} {\"a\": 0} is invalid",
    "JSON Schema Test Suite const with {\"a\": false} does not match {\"a\": 0} {\"a\": 0.0} is invalid",
    "JSON Schema Test Suite const with {\"a\": true} does not match {\"a\": 1} {\"a\": 1} is invalid",
    "JSON Schema Test Suite const with {\"a\": true} does not match {\"a\": 1} {\"a\": 1.0} is invalid",
    "JSON Schema Test Suite const with 0 does not match other zero-like types integer zero is valid",
    "JSON Schema Test Suite const with 0 does not match other zero-like types float zero is valid",
    "JSON Schema Test Suite const with 0 does not match other zero-like types empty object is invalid",
    "JSON Schema Test Suite const with 0 does not match other zero-like types empty array is invalid",
    "JSON Schema Test Suite const with 1 does not match true integer one is valid",
    "JSON Schema Test Suite const with 1 does not match true float one is valid",
    "JSON Schema Test Suite const with -2.0 matches integer and float types integer -2 is valid",
    "JSON Schema Test Suite const with -2.0 matches integer and float types float -2.0 is valid",
    "JSON Schema Test Suite float and integers are equal up to 64-bit representation limits integer is valid",
    "JSON Schema Test Suite float and integers are equal up to 64-bit representation limits float is valid",
    "JSON Schema Test Suite nul characters in strings match string with nul",
    "JSON Schema Test Suite contains keyword validation array without items matching schema is invalid",
    "JSON Schema Test Suite contains keyword validation empty array is invalid",
    "JSON Schema Test Suite contains keyword with const keyword array without item 5 is invalid",
    "JSON Schema Test Suite contains keyword with boolean schema true empty array is invalid",
    "JSON Schema Test Suite contains keyword with boolean schema false any non-empty array is invalid",
    "JSON Schema Test Suite contains keyword with boolean schema false empty array is invalid",
    "JSON Schema Test Suite contains keyword with boolean schema false non-arrays are valid",
    "JSON Schema Test Suite items + contains matches items, does not match contains",
    "JSON Schema Test Suite items + contains does not match items, matches contains",
    "JSON Schema Test Suite items + contains matches neither items nor contains",
    "JSON Schema Test Suite contains with false if subschema empty array is invalid",
    "JSON Schema Test Suite validation of string-encoded content based on media type a valid JSON document",
    "JSON Schema Test Suite validation of string-encoded content based on media type an invalid JSON document; validates true",
    "JSON Schema Test Suite validation of string-encoded content based on media type ignores non-strings",
    "JSON Schema Test Suite validation of binary string-encoding a valid base64 string",
    "JSON Schema Test Suite validation of binary string-encoding an invalid base64 string (% is not a valid character); validates true",
    "JSON Schema Test Suite validation of binary string-encoding ignores non-strings",
    "JSON Schema Test Suite validation of binary-encoded media type documents a valid base64-encoded JSON document",
    "JSON Schema Test Suite validation of binary-encoded media type documents a validly-encoded invalid JSON document; validates true",
    "JSON Schema Test Suite validation of binary-encoded media type documents an invalid base64 string that is valid JSON; validates true",
    "JSON Schema Test Suite validation of binary-encoded media type documents ignores non-strings",
    "JSON Schema Test Suite validation of binary-encoded media type documents with schema a valid base64-encoded JSON document",
    "JSON Schema Test Suite validation of binary-encoded media type documents with schema another valid base64-encoded JSON document",
    "JSON Schema Test Suite validation of binary-encoded media type documents with schema an invalid base64-encoded JSON document; validates true",
    "JSON Schema Test Suite validation of binary-encoded media type documents with schema an empty object as a base64-encoded JSON document; validates true",
    "JSON Schema Test Suite validation of binary-encoded media type documents with schema an empty array as a base64-encoded JSON document",
    "JSON Schema Test Suite validation of binary-encoded media type documents with schema a validly-encoded invalid JSON document; validates true",
    "JSON Schema Test Suite validation of binary-encoded media type documents with schema an invalid base64 string that is valid JSON; validates true",
    "JSON Schema Test Suite validation of binary-encoded media type documents with schema ignores non-strings",
    "JSON Schema Test Suite invalid type for default valid when property is specified",
    "JSON Schema Test Suite the default keyword does not do anything if the property is missing an explicit property value is checked against maximum (failing)",
    "JSON Schema Test Suite validate definition against metaschema invalid definition schema",
    "JSON Schema Test Suite single dependency missing dependency",
    "JSON Schema Test Suite single dependency ignores strings",
    "JSON Schema Test Suite single dependency ignores other non-objects",
    "JSON Schema Test Suite empty dependents non-object is valid",
    "JSON Schema Test Suite multiple dependents required missing dependency",
    "JSON Schema Test Suite multiple dependents required missing other dependency",
    "JSON Schema Test Suite multiple dependents required missing both dependencies",
    "JSON Schema Test Suite dependencies with escaped characters CRLF missing dependent",
    "JSON Schema Test Suite dependencies with escaped characters quoted quotes missing dependent",
    "JSON Schema Test Suite single dependency wrong type",
    "JSON Schema Test Suite single dependency wrong type other",
    "JSON Schema Test Suite single dependency wrong type both",
    "JSON Schema Test Suite boolean subschemas object with property having schema false is invalid",
    "JSON Schema Test Suite boolean subschemas object with both properties is invalid",
    "JSON Schema Test Suite dependencies with escaped characters quoted quote",
    "JSON Schema Test Suite dependencies with escaped characters quoted tab invalid under dependent schema",
    "JSON Schema Test Suite dependencies with escaped characters quoted quote invalid under dependent schema",
    "JSON Schema Test Suite A $dynamicRef to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor An array of strings is valid",
    "JSON Schema Test Suite A $dynamicRef to an $anchor in the same schema resource behaves like a normal $ref to an $anchor An array of strings is valid",
    "JSON Schema Test Suite A $ref to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor An array of strings is valid",
    "JSON Schema Test Suite A $dynamicRef resolves to the first $dynamicAnchor still in scope that is encountered when the schema is evaluated An array containing non-strings is invalid",
    "JSON Schema Test Suite A $dynamicRef without anchor in fragment behaves identical to $ref An array of strings is invalid",
    "JSON Schema Test Suite A $dynamicRef with intermediate scopes that don't include a matching $dynamicAnchor does not affect dynamic scope resolution An array containing non-strings is invalid",
    "JSON Schema Test Suite A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor resolves to the first $dynamicAnchor in the dynamic scope The recursive part is valid against the root",
    "JSON Schema Test Suite A $dynamicRef that initially resolves to a schema without a matching $dynamicAnchor behaves like a normal $ref to $anchor The recursive part doesn't need to validate against the root",
    "JSON Schema Test Suite multiple dynamic paths to the $dynamicRef keyword number list with string values",
    "JSON Schema Test Suite multiple dynamic paths to the $dynamicRef keyword string list with number values",
    "JSON Schema Test Suite strict-tree schema, guards against misspelled properties instance with misspelled field",
    "JSON Schema Test Suite tests for implementation dynamic anchor and reference link incorrect parent schema",
    "JSON Schema Test Suite tests for implementation dynamic anchor and reference link incorrect extended schema",
    "JSON Schema Test Suite $ref and $dynamicAnchor are independent of order - $defs first incorrect parent schema",
    "JSON Schema Test Suite $ref and $dynamicAnchor are independent of order - $defs first incorrect extended schema",
    "JSON Schema Test Suite $ref and $dynamicAnchor are independent of order - $ref first incorrect parent schema",
    "JSON Schema Test Suite $ref and $dynamicAnchor are independent of order - $ref first incorrect extended schema",
    "JSON Schema Test Suite $ref to $dynamicRef finds detached $dynamicAnchor number is valid",
    "JSON Schema Test Suite $dynamicRef points to a boolean schema follow $dynamicRef to a true schema",
    "JSON Schema Test Suite $dynamicRef skips over intermediate resources - direct reference string property fails",
    "JSON Schema Test Suite simple enum validation one of the enum is valid",
    "JSON Schema Test Suite heterogeneous enum validation something else is invalid",
    "JSON Schema Test Suite heterogeneous enum validation objects are deep compared",
    "JSON Schema Test Suite heterogeneous enum validation extra properties in object is invalid",
    "JSON Schema Test Suite heterogeneous enum-with-null validation number is valid",
    "JSON Schema Test Suite enums in properties both properties are valid",
    "JSON Schema Test Suite enums in properties missing optional property is valid",
    "JSON Schema Test Suite enum with escaped characters member 1 is valid",
    "JSON Schema Test Suite enum with escaped characters member 2 is valid",
    "JSON Schema Test Suite enum with false does not match 0 false is valid",
    "JSON Schema Test Suite enum with [false] does not match [0] [0] is invalid",
    "JSON Schema Test Suite enum with [false] does not match [0] [0.0] is invalid",
    "JSON Schema Test Suite enum with true does not match 1 true is valid",
    "JSON Schema Test Suite enum with [true] does not match [1] [1] is invalid",
    "JSON Schema Test Suite enum with [true] does not match [1] [1.0] is invalid",
    "JSON Schema Test Suite enum with 0 does not match false integer zero is valid",
    "JSON Schema Test Suite enum with 0 does not match false float zero is valid",
    "JSON Schema Test Suite enum with [0] does not match [false] [false] is invalid",
    "JSON Schema Test Suite enum with 1 does not match true integer one is valid",
    "JSON Schema Test Suite enum with 1 does not match true float one is valid",
    "JSON Schema Test Suite enum with [1] does not match [true] [true] is invalid",
    "JSON Schema Test Suite exclusiveMaximum validation below the exclusiveMaximum is valid",
    "JSON Schema Test Suite exclusiveMaximum validation ignores non-numbers",
    "JSON Schema Test Suite exclusiveMinimum validation above the exclusiveMinimum is valid",
    "JSON Schema Test Suite exclusiveMinimum validation ignores non-numbers",
    "JSON Schema Test Suite email format all string formats ignore integers",
    "JSON Schema Test Suite email format all string formats ignore floats",
    "JSON Schema Test Suite email format all string formats ignore booleans",
    "JSON Schema Test Suite email format invalid email string is only an annotation by default",
    "JSON Schema Test Suite idn-email format all string formats ignore integers",
    "JSON Schema Test Suite idn-email format all string formats ignore floats",
    "JSON Schema Test Suite idn-email format all string formats ignore booleans",
    "JSON Schema Test Suite idn-email format invalid idn-email string is only an annotation by default",
    "JSON Schema Test Suite regex format all string formats ignore integers",
    "JSON Schema Test Suite regex format all string formats ignore floats",
    "JSON Schema Test Suite regex format all string formats ignore booleans",
    "JSON Schema Test Suite regex format invalid regex string is only an annotation by default",
    "JSON Schema Test Suite ipv4 format all string formats ignore integers",
    "JSON Schema Test Suite ipv4 format all string formats ignore floats",
    "JSON Schema Test Suite ipv4 format all string formats ignore booleans",
    "JSON Schema Test Suite ipv4 format invalid ipv4 string is only an annotation by default",
    "JSON Schema Test Suite ipv6 format all string formats ignore integers",
    "JSON Schema Test Suite ipv6 format all string formats ignore floats",
    "JSON Schema Test Suite ipv6 format all string formats ignore booleans",
    "JSON Schema Test Suite ipv6 format invalid ipv6 string is only an annotation by default",
    "JSON Schema Test Suite idn-hostname format all string formats ignore integers",
    "JSON Schema Test Suite idn-hostname format all string formats ignore floats",
    "JSON Schema Test Suite idn-hostname format all string formats ignore booleans",
    "JSON Schema Test Suite idn-hostname format invalid idn-hostname string is only an annotation by default",
    "JSON Schema Test Suite hostname format all string formats ignore integers",
    "JSON Schema Test Suite hostname format all string formats ignore floats",
    "JSON Schema Test Suite hostname format all string formats ignore booleans",
    "JSON Schema Test Suite hostname format invalid hostname string is only an annotation by default",
    "JSON Schema Test Suite date format all string formats ignore integers",
    "JSON Schema Test Suite date format all string formats ignore floats",
    "JSON Schema Test Suite date format all string formats ignore booleans",
    "JSON Schema Test Suite date format invalid date string is only an annotation by default",
    "JSON Schema Test Suite date-time format all string formats ignore integers",
    "JSON Schema Test Suite date-time format all string formats ignore floats",
    "JSON Schema Test Suite date-time format all string formats ignore booleans",
    "JSON Schema Test Suite date-time format invalid date-time string is only an annotation by default",
    "JSON Schema Test Suite time format all string formats ignore integers",
    "JSON Schema Test Suite time format all string formats ignore floats",
    "JSON Schema Test Suite time format all string formats ignore booleans",
    "JSON Schema Test Suite time format invalid time string is only an annotation by default",
    "JSON Schema Test Suite json-pointer format all string formats ignore integers",
    "JSON Schema Test Suite json-pointer format all string formats ignore floats",
    "JSON Schema Test Suite json-pointer format all string formats ignore booleans",
    "JSON Schema Test Suite json-pointer format invalid json-pointer string is only an annotation by default",
    "JSON Schema Test Suite relative-json-pointer format all string formats ignore integers",
    "JSON Schema Test Suite relative-json-pointer format all string formats ignore floats",
    "JSON Schema Test Suite relative-json-pointer format all string formats ignore booleans",
    "JSON Schema Test Suite relative-json-pointer format invalid relative-json-pointer string is only an annotation by default",
    "JSON Schema Test Suite iri format all string formats ignore integers",
    "JSON Schema Test Suite iri format all string formats ignore floats",
    "JSON Schema Test Suite iri format all string formats ignore booleans",
    "JSON Schema Test Suite iri format invalid iri string is only an annotation by default",
    "JSON Schema Test Suite iri-reference format all string formats ignore integers",
    "JSON Schema Test Suite iri-reference format all string formats ignore floats",
    "JSON Schema Test Suite iri-reference format all string formats ignore booleans",
    "JSON Schema Test Suite iri-reference format invalid iri-reference string is only an annotation by default",
    "JSON Schema Test Suite uri format all string formats ignore integers",
    "JSON Schema Test Suite uri format all string formats ignore floats",
    "JSON Schema Test Suite uri format all string formats ignore booleans",
    "JSON Schema Test Suite uri format invalid uri string is only an annotation by default",
    "JSON Schema Test Suite uri-reference format all string formats ignore integers",
    "JSON Schema Test Suite uri-reference format all string formats ignore floats",
    "JSON Schema Test Suite uri-reference format all string formats ignore booleans",
    "JSON Schema Test Suite uri-reference format invalid uri-reference string is only an annotation by default",
    "JSON Schema Test Suite uri-template format all string formats ignore integers",
    "JSON Schema Test Suite uri-template format all string formats ignore floats",
    "JSON Schema Test Suite uri-template format all string formats ignore booleans",
    "JSON Schema Test Suite uri-template format invalid uri-template string is only an annotation by default",
    "JSON Schema Test Suite uuid format all string formats ignore integers",
    "JSON Schema Test Suite uuid format all string formats ignore floats",
    "JSON Schema Test Suite uuid format all string formats ignore booleans",
    "JSON Schema Test Suite uuid format invalid uuid string is only an annotation by default",
    "JSON Schema Test Suite duration format all string formats ignore integers",
    "JSON Schema Test Suite duration format all string formats ignore floats",
    "JSON Schema Test Suite duration format all string formats ignore booleans",
    "JSON Schema Test Suite duration format invalid duration string is only an annotation by default",
    "JSON Schema Test Suite ignore if without then or else valid when valid against lone if",
    "JSON Schema Test Suite ignore if without then or else valid when invalid against lone if",
    "JSON Schema Test Suite ignore then without if valid when valid against lone then",
    "JSON Schema Test Suite ignore then without if valid when invalid against lone then",
    "JSON Schema Test Suite ignore else without if valid when valid against lone else",
    "JSON Schema Test Suite ignore else without if valid when invalid against lone else",
    "JSON Schema Test Suite if and then without else valid through then",
    "JSON Schema Test Suite if and then without else valid when if test fails",
    "JSON Schema Test Suite if and else without then valid when if test passes",
    "JSON Schema Test Suite if and else without then valid through else",
    "JSON Schema Test Suite validate against correct branch, then vs else valid through then",
    "JSON Schema Test Suite validate against correct branch, then vs else valid through else",
    "JSON Schema Test Suite non-interference across combined schemas valid, but would have been invalid through then",
    "JSON Schema Test Suite non-interference across combined schemas valid, but would have been invalid through else",
    "JSON Schema Test Suite if with boolean schema true boolean schema true in if always chooses the then path (valid)",
    "JSON Schema Test Suite if with boolean schema false boolean schema false in if always chooses the else path (valid)",
    "JSON Schema Test Suite if appears at the end when serialized (keyword processing sequence) yes redirects to then and passes",
    "JSON Schema Test Suite if appears at the end when serialized (keyword processing sequence) other redirects to else and passes",
    "JSON Schema Test Suite evaluating the same schema location against the same data location twice is not a sign of an infinite loop failing case",
    "JSON Schema Test Suite a schema given for items wrong type of items",
    "JSON Schema Test Suite items with boolean schema (false) any non-empty array is invalid",
    "JSON Schema Test Suite items and subitems valid items",
    "JSON Schema Test Suite items and subitems fewer items is valid",
    "JSON Schema Test Suite nested items valid nested array",
    "JSON Schema Test Suite prefixItems with no additional items allowed additional items are not permitted",
    "JSON Schema Test Suite items does not look in applicators, valid case prefixItems in allOf does not constrain items, invalid case",
    "JSON Schema Test Suite prefixItems validation adjusts the starting index for items wrong type of second item",
    "JSON Schema Test Suite items with heterogeneous array heterogeneous invalid instance",
    "JSON Schema Test Suite maxContains with contains empty data",
    "JSON Schema Test Suite maxContains with contains all elements match, invalid maxContains",
    "JSON Schema Test Suite maxContains with contains some elements match, invalid maxContains",
    "JSON Schema Test Suite maxContains with contains, value with a decimal too many elements match, invalid maxContains",
    "JSON Schema Test Suite minContains < maxContains actual < minContains < maxContains",
    "JSON Schema Test Suite minContains < maxContains minContains < maxContains < actual",
    "JSON Schema Test Suite maxItems validation too long is invalid",
    "JSON Schema Test Suite maxItems validation ignores non-arrays",
    "JSON Schema Test Suite maxItems validation with a decimal too long is invalid",
    "JSON Schema Test Suite maxLength validation shorter is valid",
    "JSON Schema Test Suite maxLength validation exact length is valid",
    "JSON Schema Test Suite maxLength validation ignores non-strings",
    "JSON Schema Test Suite maxLength validation two graphemes is long enough",
    "JSON Schema Test Suite maxLength validation with a decimal shorter is valid",
    "JSON Schema Test Suite maxProperties validation too long is invalid",
    "JSON Schema Test Suite maxProperties validation ignores strings",
    "JSON Schema Test Suite maxProperties validation ignores other non-objects",
    "JSON Schema Test Suite maxProperties validation with a decimal too long is invalid",
    "JSON Schema Test Suite maxProperties = 0 means the object is empty one property is invalid",
    "JSON Schema Test Suite maximum validation below the maximum is valid",
    "JSON Schema Test Suite maximum validation boundary point is valid",
    "JSON Schema Test Suite maximum validation ignores non-numbers",
    "JSON Schema Test Suite maximum validation with unsigned integer below the maximum is invalid",
    "JSON Schema Test Suite maximum validation with unsigned integer boundary point integer is valid",
    "JSON Schema Test Suite maximum validation with unsigned integer boundary point float is valid",
    "JSON Schema Test Suite minContains=1 with contains empty data",
    "JSON Schema Test Suite minContains=1 with contains no elements match",
    "JSON Schema Test Suite minContains=2 with contains empty data",
    "JSON Schema Test Suite minContains=2 with contains all elements match, invalid minContains",
    "JSON Schema Test Suite minContains=2 with contains some elements match, invalid minContains",
    "JSON Schema Test Suite minContains=2 with contains with a decimal value one element matches, invalid minContains",
    "JSON Schema Test Suite maxContains = minContains empty data",
    "JSON Schema Test Suite maxContains = minContains all elements match, invalid minContains",
    "JSON Schema Test Suite maxContains = minContains all elements match, invalid maxContains",
    "JSON Schema Test Suite maxContains < minContains empty data",
    "JSON Schema Test Suite maxContains < minContains invalid minContains",
    "JSON Schema Test Suite maxContains < minContains invalid maxContains",
    "JSON Schema Test Suite maxContains < minContains invalid maxContains and minContains",
    "JSON Schema Test Suite minContains = 0 with maxContains too many",
    "JSON Schema Test Suite minItems validation too short is invalid",
    "JSON Schema Test Suite minItems validation ignores non-arrays",
    "JSON Schema Test Suite minItems validation with a decimal too short is invalid",
    "JSON Schema Test Suite minLength validation longer is valid",
    "JSON Schema Test Suite minLength validation exact length is valid",
    "JSON Schema Test Suite minLength validation ignores non-strings",
    "JSON Schema Test Suite minLength validation with a decimal longer is valid",
    "JSON Schema Test Suite minProperties validation too short is invalid",
    "JSON Schema Test Suite minProperties validation ignores strings",
    "JSON Schema Test Suite minProperties validation ignores other non-objects",
    "JSON Schema Test Suite minProperties validation with a decimal too short is invalid",
    "JSON Schema Test Suite minimum validation above the minimum is valid",
    "JSON Schema Test Suite minimum validation boundary point is valid",
    "JSON Schema Test Suite minimum validation ignores non-numbers",
    "JSON Schema Test Suite minimum validation with signed integer negative above the minimum is valid",
    "JSON Schema Test Suite minimum validation with signed integer positive above the minimum is valid",
    "JSON Schema Test Suite minimum validation with signed integer boundary point is valid",
    "JSON Schema Test Suite minimum validation with signed integer boundary point with float is valid",
    "JSON Schema Test Suite minimum validation with signed integer ignores non-numbers",
    "JSON Schema Test Suite by int int by int",
    "JSON Schema Test Suite by int ignores non-numbers",
    "JSON Schema Test Suite by number zero is multiple of anything",
    "JSON Schema Test Suite by number 4.5 is multiple of 1.5",
    "JSON Schema Test Suite by small number 0.0075 is multiple of 0.0001",
    "JSON Schema Test Suite small multiple of large integer any integer is a multiple of 1e-8",
    "JSON Schema Test Suite not allowed",
    "JSON Schema Test Suite not multiple types valid",
    "JSON Schema Test Suite not more complex schema match",
    "JSON Schema Test Suite not more complex schema mismatch",
    "JSON Schema Test Suite forbid everything with empty schema null is invalid",
    "JSON Schema Test Suite forbid everything with empty schema object is invalid",
    "JSON Schema Test Suite forbid everything with empty schema empty object is invalid",
    "JSON Schema Test Suite forbid everything with empty schema array is invalid",
    "JSON Schema Test Suite forbid everything with empty schema empty array is invalid",
    "JSON Schema Test Suite forbid everything with boolean schema true null is invalid",
    "JSON Schema Test Suite forbid everything with boolean schema true object is invalid",
    "JSON Schema Test Suite forbid everything with boolean schema true empty object is invalid",
    "JSON Schema Test Suite forbid everything with boolean schema true array is invalid",
    "JSON Schema Test Suite forbid everything with boolean schema true empty array is invalid",
    "JSON Schema Test Suite allow everything with boolean schema false number is valid",
    "JSON Schema Test Suite allow everything with boolean schema false string is valid",
    "JSON Schema Test Suite allow everything with boolean schema false boolean true is valid",
    "JSON Schema Test Suite allow everything with boolean schema false boolean false is valid",
    "JSON Schema Test Suite double negation any value is valid",
    "JSON Schema Test Suite collect annotations inside a 'not', even if collection is disabled annotations are still collected inside a 'not'",
    "JSON Schema Test Suite oneOf first oneOf valid",
    "JSON Schema Test Suite oneOf second oneOf valid",
    "JSON Schema Test Suite oneOf with base schema both oneOf valid",
    "JSON Schema Test Suite oneOf with boolean schemas, one true any value is valid",
    "JSON Schema Test Suite oneOf complex types both oneOf valid (complex)",
    "JSON Schema Test Suite oneOf complex types neither oneOf valid (complex)",
    "JSON Schema Test Suite oneOf with empty schema one valid - valid",
    "JSON Schema Test Suite oneOf with required both invalid - invalid",
    "JSON Schema Test Suite oneOf with required both valid - invalid",
    "JSON Schema Test Suite oneOf with missing optional property both oneOf valid",
    "JSON Schema Test Suite oneOf with missing optional property neither oneOf valid",
    "JSON Schema Test Suite pattern validation a matching pattern is valid",
    "JSON Schema Test Suite pattern validation ignores booleans",
    "JSON Schema Test Suite pattern validation ignores integers",
    "JSON Schema Test Suite pattern validation ignores floats",
    "JSON Schema Test Suite pattern is not anchored matches a substring",
    "JSON Schema Test Suite patternProperties validates properties matching a regex a single invalid match is invalid",
    "JSON Schema Test Suite patternProperties validates properties matching a regex multiple invalid matches is invalid",
    "JSON Schema Test Suite patternProperties validates properties matching a regex ignores strings",
    "JSON Schema Test Suite patternProperties validates properties matching a regex ignores other non-objects",
    "JSON Schema Test Suite multiple simultaneous patternProperties are validated an invalid due to one is invalid",
    "JSON Schema Test Suite multiple simultaneous patternProperties are validated an invalid due to the other is invalid",
    "JSON Schema Test Suite multiple simultaneous patternProperties are validated an invalid due to both is invalid",
    "JSON Schema Test Suite regexes are not anchored by default and are case sensitive recognized members are accounted for",
    "JSON Schema Test Suite regexes are not anchored by default and are case sensitive regexes are case sensitive, 2",
    "JSON Schema Test Suite patternProperties with boolean schemas object with property matching schema false is invalid",
    "JSON Schema Test Suite patternProperties with boolean schemas object with both properties is invalid",
    "JSON Schema Test Suite patternProperties with boolean schemas object with a property matching both true and false is invalid",
    "JSON Schema Test Suite a schema given for prefixItems wrong types",
    "JSON Schema Test Suite prefixItems with boolean schemas array with two items is invalid",
    "JSON Schema Test Suite object properties validation both properties present and valid is valid",
    "JSON Schema Test Suite object properties validation ignores other non-objects",
    "JSON Schema Test Suite properties, patternProperties, additionalProperties interaction property validates property",
    "JSON Schema Test Suite properties, patternProperties, additionalProperties interaction patternProperty invalidates nonproperty",
    "JSON Schema Test Suite properties, patternProperties, additionalProperties interaction additionalProperty ignores property",
    "JSON Schema Test Suite properties, patternProperties, additionalProperties interaction additionalProperty invalidates others",
    "JSON Schema Test Suite properties with null valued instance properties allows null values",
    "JSON Schema Test Suite properties whose names are Javascript object property names ignores arrays",
    "JSON Schema Test Suite properties whose names are Javascript object property names ignores other non-objects",
    "JSON Schema Test Suite properties whose names are Javascript object property names none of the properties mentioned",
    "JSON Schema Test Suite propertyNames validation some property names invalid",
    "JSON Schema Test Suite propertyNames validation ignores strings",
    "JSON Schema Test Suite propertyNames validation ignores other non-objects",
    "JSON Schema Test Suite propertyNames with boolean schema false object with any properties is invalid",
    "JSON Schema Test Suite root pointer ref match",
    "JSON Schema Test Suite root pointer ref mismatch",
    "JSON Schema Test Suite root pointer ref recursive mismatch",
    "JSON Schema Test Suite relative pointer ref to object match",
    "JSON Schema Test Suite relative pointer ref to array mismatch array",
    "JSON Schema Test Suite escaped pointer ref slash valid",
    "JSON Schema Test Suite escaped pointer ref tilde valid",
    "JSON Schema Test Suite escaped pointer ref percent valid",
    "JSON Schema Test Suite nested refs nested ref valid",
    "JSON Schema Test Suite ref applies alongside sibling keywords ref valid, maxItems invalid",
    "JSON Schema Test Suite remote ref, containing refs itself remote ref invalid",
    "JSON Schema Test Suite property named $ref, containing an actual $ref property named $ref valid",
    "JSON Schema Test Suite $ref to boolean schema true any value is valid",
    "JSON Schema Test Suite Recursive references between schemas valid tree",
    "JSON Schema Test Suite refs with quote object with numbers is valid",
    "JSON Schema Test Suite ref creates new scope when adjacent to keywords referenced subschema doesn't see annotations from properties",
    "JSON Schema Test Suite naive replacement of $ref with its destination is not correct do not evaluate the $ref inside the enum, definition exact match",
    "JSON Schema Test Suite refs with relative uris and defs invalid on inner field",
    "JSON Schema Test Suite refs with relative uris and defs invalid on outer field",
    "JSON Schema Test Suite relative refs with absolute uris and defs invalid on inner field",
    "JSON Schema Test Suite relative refs with absolute uris and defs invalid on outer field",
    "JSON Schema Test Suite $id must be resolved against nearest parent, not just immediate parent number is valid",
    "JSON Schema Test Suite order of evaluation: $id and $ref data is valid against first definition",
    "JSON Schema Test Suite order of evaluation: $id and $anchor and $ref data is valid against first definition",
    "JSON Schema Test Suite simple URN base URI with $ref via the URN valid under the URN IDed schema",
    "JSON Schema Test Suite simple URN base URI with JSON pointer a string is valid",
    "JSON Schema Test Suite URN base URI with NSS a string is valid",
    "JSON Schema Test Suite URN base URI with r-component a string is valid",
    "JSON Schema Test Suite URN base URI with q-component a string is valid",
    "JSON Schema Test Suite URN base URI with URN and JSON pointer ref a string is valid",
    "JSON Schema Test Suite URN base URI with URN and anchor ref a string is valid",
    "JSON Schema Test Suite URN ref with nested pointer ref a string is valid",
    "JSON Schema Test Suite ref to if an integer is valid",
    "JSON Schema Test Suite ref to then an integer is valid",
    "JSON Schema Test Suite ref to else an integer is valid",
    "JSON Schema Test Suite ref with absolute-path-reference a string is valid",
    "JSON Schema Test Suite $id with file URI still resolves pointers - *nix number is valid",
    "JSON Schema Test Suite $id with file URI still resolves pointers - windows number is valid",
    "JSON Schema Test Suite empty tokens in $ref json-pointer number is valid",
    "JSON Schema Test Suite remote ref remote ref valid",
    "JSON Schema Test Suite fragment within remote ref remote fragment valid",
    "JSON Schema Test Suite anchor within remote ref remote anchor valid",
    "JSON Schema Test Suite ref within remote ref ref within ref valid",
    "JSON Schema Test Suite base URI change base URI change ref invalid",
    "JSON Schema Test Suite base URI change - change folder string is invalid",
    "JSON Schema Test Suite base URI change - change folder in subschema string is invalid",
    "JSON Schema Test Suite root ref in remote ref string is valid",
    "JSON Schema Test Suite root ref in remote ref object is invalid",
    "JSON Schema Test Suite remote ref with ref to defs invalid",
    "JSON Schema Test Suite Location-independent identifier in remote ref integer is valid",
    "JSON Schema Test Suite retrieved nested refs resolve relative to their URI not $id number is invalid",
    "JSON Schema Test Suite remote HTTP ref with different $id string is valid",
    "JSON Schema Test Suite remote HTTP ref with different URN $id string is valid",
    "JSON Schema Test Suite remote HTTP ref with nested absolute ref string is valid",
    "JSON Schema Test Suite $ref to $ref finds detached $anchor number is valid",
    "JSON Schema Test Suite required validation present required property is valid",
    "JSON Schema Test Suite required validation ignores arrays",
    "JSON Schema Test Suite required validation ignores strings",
    "JSON Schema Test Suite required validation ignores other non-objects",
    "JSON Schema Test Suite required with escaped characters object with some properties missing is invalid",
    "JSON Schema Test Suite required properties whose names are Javascript object property names ignores other non-objects",
    "JSON Schema Test Suite required properties whose names are Javascript object property names none of the properties mentioned",
    "JSON Schema Test Suite required properties whose names are Javascript object property names __proto__ present",
    "JSON Schema Test Suite required properties whose names are Javascript object property names toString present",
    "JSON Schema Test Suite required properties whose names are Javascript object property names constructor present",
    "JSON Schema Test Suite integer type matches integers an integer is an integer",
    "JSON Schema Test Suite integer type matches integers a float with zero fractional part is an integer",
    "JSON Schema Test Suite object type matches objects an array is not an object",
    "JSON Schema Test Suite object type matches objects null is not an object",
    "JSON Schema Test Suite array type matches arrays an array is an array",
    "JSON Schema Test Suite null type matches only the null object null is null",
    "JSON Schema Test Suite multiple types can be specified in an array an integer is valid",
    "JSON Schema Test Suite type: array or object null is invalid",
    "JSON Schema Test Suite unevaluatedItems false with unevaluated items",
    "JSON Schema Test Suite unevaluatedItems as schema with invalid unevaluated items",
    "JSON Schema Test Suite unevaluatedItems with tuple with unevaluated items",
    "JSON Schema Test Suite unevaluatedItems with items invalid under items",
    "JSON Schema Test Suite unevaluatedItems with nested tuple with unevaluated items",
    "JSON Schema Test Suite unevaluatedItems with nested items with invalid additional item",
    "JSON Schema Test Suite unevaluatedItems with anyOf when one schema matches and has unevaluated items",
    "JSON Schema Test Suite unevaluatedItems with anyOf when two schemas match and has unevaluated items",
    "JSON Schema Test Suite unevaluatedItems with oneOf with unevaluated items",
    "JSON Schema Test Suite unevaluatedItems with not with unevaluated items",
    "JSON Schema Test Suite unevaluatedItems with if/then/else when if matches and it has unevaluated items",
    "JSON Schema Test Suite unevaluatedItems with if/then/else when if doesn't match and it has unevaluated items",
    "JSON Schema Test Suite unevaluatedItems with boolean schemas with unevaluated items",
    "JSON Schema Test Suite unevaluatedItems with $ref with unevaluated items",
    "JSON Schema Test Suite unevaluatedItems before $ref with unevaluated items",
    "JSON Schema Test Suite unevaluatedItems with $dynamicRef with unevaluated items",
    "JSON Schema Test Suite unevaluatedItems can't see inside cousins always fails",
    "JSON Schema Test Suite item is evaluated in an uncle schema to unevaluatedItems uncle keyword evaluation is not significant",
    "JSON Schema Test Suite unevaluatedItems depends on adjacent contains contains fails, second item is not evaluated",
    "JSON Schema Test Suite unevaluatedItems depends on adjacent contains contains passes, second item is not evaluated",
    "JSON Schema Test Suite unevaluatedItems depends on multiple nested contains 7 not evaluated, fails unevaluatedItems",
    "JSON Schema Test Suite unevaluatedItems and contains interact to control item dependency relationship only b's are invalid",
    "JSON Schema Test Suite unevaluatedItems and contains interact to control item dependency relationship only c's are invalid",
    "JSON Schema Test Suite unevaluatedItems and contains interact to control item dependency relationship only b's and c's are invalid",
    "JSON Schema Test Suite unevaluatedItems and contains interact to control item dependency relationship only a's and c's are invalid",
    "JSON Schema Test Suite non-array instances are valid ignores booleans",
    "JSON Schema Test Suite non-array instances are valid ignores integers",
    "JSON Schema Test Suite non-array instances are valid ignores floats",
    "JSON Schema Test Suite non-array instances are valid ignores strings",
    "JSON Schema Test Suite unevaluatedItems can see annotations from if without then and else invalid in case if is evaluated",
    "JSON Schema Test Suite unevaluatedProperties schema with invalid unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties false with unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with adjacent properties with unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with adjacent patternProperties with unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with nested properties with additional properties",
    "JSON Schema Test Suite unevaluatedProperties with nested patternProperties with additional properties",
    "JSON Schema Test Suite unevaluatedProperties with anyOf when one matches and has unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with anyOf when two match and has unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with oneOf with unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with not with unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with if/then/else when if is true and has unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with if/then/else when if is false and has unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with if/then/else, then not defined when if is true and has no unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with if/then/else, then not defined when if is true and has unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with if/then/else, then not defined when if is false and has unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with if/then/else, else not defined when if is true and has unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with if/then/else, else not defined when if is false and has no unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with if/then/else, else not defined when if is false and has unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with dependentSchemas with unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with boolean schemas with unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with $ref with unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties before $ref with unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties with $dynamicRef with unevaluated properties",
    "JSON Schema Test Suite unevaluatedProperties can't see inside cousins always fails",
    "JSON Schema Test Suite unevaluatedProperties can't see inside cousins (reverse order) always fails",
    "JSON Schema Test Suite nested unevaluatedProperties, outer true, inner false, properties outside with no nested unevaluated properties",
    "JSON Schema Test Suite nested unevaluatedProperties, outer true, inner false, properties outside with nested unevaluated properties",
    "JSON Schema Test Suite nested unevaluatedProperties, outer true, inner false, properties inside with nested unevaluated properties",
    "JSON Schema Test Suite cousin unevaluatedProperties, true and false, true with properties with no nested unevaluated properties",
    "JSON Schema Test Suite cousin unevaluatedProperties, true and false, true with properties with nested unevaluated properties",
    "JSON Schema Test Suite cousin unevaluatedProperties, true and false, false with properties with nested unevaluated properties",
    "JSON Schema Test Suite property is evaluated in an uncle schema to unevaluatedProperties uncle keyword evaluation is not significant",
    "JSON Schema Test Suite in-place applicator siblings, allOf has unevaluated base case: both properties present",
    "JSON Schema Test Suite in-place applicator siblings, allOf has unevaluated in place applicator siblings, foo is missing",
    "JSON Schema Test Suite in-place applicator siblings, anyOf has unevaluated base case: both properties present",
    "JSON Schema Test Suite in-place applicator siblings, anyOf has unevaluated in place applicator siblings, bar is missing",
    "JSON Schema Test Suite unevaluatedProperties + single cyclic ref Unevaluated on 1st level is invalid",
    "JSON Schema Test Suite unevaluatedProperties + single cyclic ref Unevaluated on 2nd level is invalid",
    "JSON Schema Test Suite unevaluatedProperties + single cyclic ref Unevaluated on 3rd level is invalid",
    "JSON Schema Test Suite unevaluatedProperties + ref inside allOf / oneOf Empty is invalid (no x or y)",
    "JSON Schema Test Suite unevaluatedProperties + ref inside allOf / oneOf a and b are invalid (no x or y)",
    "JSON Schema Test Suite unevaluatedProperties + ref inside allOf / oneOf x and y are invalid",
    "JSON Schema Test Suite unevaluatedProperties + ref inside allOf / oneOf a and b and x and y are invalid",
    "JSON Schema Test Suite dynamic evalation inside nested refs Empty is invalid",
    "JSON Schema Test Suite dynamic evalation inside nested refs a + b is invalid",
    "JSON Schema Test Suite dynamic evalation inside nested refs a + c is invalid",
    "JSON Schema Test Suite dynamic evalation inside nested refs a + d is invalid",
    "JSON Schema Test Suite dynamic evalation inside nested refs b + c is invalid",
    "JSON Schema Test Suite dynamic evalation inside nested refs b + d is invalid",
    "JSON Schema Test Suite dynamic evalation inside nested refs c + d is invalid",
    "JSON Schema Test Suite dynamic evalation inside nested refs xx + foo is invalid",
    "JSON Schema Test Suite dynamic evalation inside nested refs xx + a is invalid",
    "JSON Schema Test Suite dynamic evalation inside nested refs xx + b is invalid",
    "JSON Schema Test Suite dynamic evalation inside nested refs xx + c is invalid",
    "JSON Schema Test Suite dynamic evalation inside nested refs xx + d is invalid",
    "JSON Schema Test Suite dynamic evalation inside nested refs all + a is invalid",
    "JSON Schema Test Suite non-object instances are valid ignores booleans",
    "JSON Schema Test Suite non-object instances are valid ignores integers",
    "JSON Schema Test Suite non-object instances are valid ignores floats",
    "JSON Schema Test Suite non-object instances are valid ignores strings",
    "JSON Schema Test Suite unevaluatedProperties not affected by propertyNames string property is invalid",
    "JSON Schema Test Suite unevaluatedProperties can see annotations from if without then and else invalid in case if is evaluated",
    "JSON Schema Test Suite dependentSchemas with unevaluatedProperties unevaluatedProperties doesn't consider dependentSchemas",
    "JSON Schema Test Suite dependentSchemas with unevaluatedProperties unevaluatedProperties doesn't see bar when foo2 is absent",
    "JSON Schema Test Suite dependentSchemas with unevaluatedProperties unevaluatedProperties sees bar when foo2 is present",
    "JSON Schema Test Suite uniqueItems validation non-unique array of integers is invalid",
    "JSON Schema Test Suite uniqueItems validation non-unique array of more than two integers is invalid",
    "JSON Schema Test Suite uniqueItems validation numbers are unique if mathematically unequal",
    "JSON Schema Test Suite uniqueItems validation non-unique array of strings is invalid",
    "JSON Schema Test Suite uniqueItems validation non-unique array of objects is invalid",
    "JSON Schema Test Suite uniqueItems validation property order of array of objects is ignored",
    "JSON Schema Test Suite uniqueItems validation non-unique array of nested objects is invalid",
    "JSON Schema Test Suite uniqueItems validation non-unique array of arrays is invalid",
    "JSON Schema Test Suite uniqueItems validation non-unique array of more than two arrays is invalid",
    "JSON Schema Test Suite uniqueItems validation non-unique heterogeneous types are invalid",
    "JSON Schema Test Suite uniqueItems validation objects are non-unique despite key order",
    "JSON Schema Test Suite uniqueItems with an array of items [false, false] from items array is not valid",
    "JSON Schema Test Suite uniqueItems with an array of items [true, true] from items array is not valid",
    "JSON Schema Test Suite uniqueItems with an array of items non-unique array extended from [false, true] is not valid",
    "JSON Schema Test Suite uniqueItems with an array of items non-unique array extended from [true, false] is not valid",
    "JSON Schema Test Suite uniqueItems with an array of items and additionalItems=false [false, false] from items array is not valid",
    "JSON Schema Test Suite uniqueItems with an array of items and additionalItems=false [true, true] from items array is not valid",
    "JSON Schema Test Suite uniqueItems with an array of items and additionalItems=false extra items are invalid even if unique",
    "JSON Schema Test Suite uniqueItems=false with an array of items and additionalItems=false extra items are invalid even if unique",
    "JSON Schema Test Suite schema that uses custom metaschema with with no validation vocabulary no validation: valid number",
    "JSON Schema Test Suite schema that uses custom metaschema with with no validation vocabulary no validation: invalid number, but it still validates"
  ]
}